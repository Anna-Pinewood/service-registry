stages:
  - prepare
  - build
  - deploy

variables:
  IMAGE_REGISTRY: 65.108.52.119:5000
  IMAGE_NAME: web_app
  SWARM_MANAGER: 65.108.52.119
  ORIGIN_NAME: gitlab

prepare-job-get-secret:
  stage: prepare
  image: python:3.9
  rules:
    - if: '$CI_COMMIT_BRANCH == "TEST" || $CI_COMMIT_BRANCH == "PROD"'
  services:
    - name: waryak/karpov_courses:secret_ci_service
      alias: waryak
  script:
    - export SOURCE_BRANCH_LOW=$(echo $CI_COMMIT_BRANCH | tr '[:upper:]' '[:lower:]')
    - echo http://waryak:5000/get_secret_number/${SOURCE_BRANCH_LOW}
    - SECRET_NUMBER=$(curl -s http://waryak:5000/get_secret_number/${SOURCE_BRANCH_LOW})
    - echo $SECRET_NUMBER
    - echo $SECRET_NUMBER > ./secret.txt
  artifacts:
      paths:
        - ./secret.txt


build-job:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "TEST" || $CI_COMMIT_BRANCH == "PROD"'
  before_script:
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - echo "${SSH_PRIVATE_KEY_ENCODED}" | base64 --decode | ssh-add -
    - ssh root@$SWARM_MANAGER "ls"
    - echo "Successfuly connected to remote server."
  script:
    - ssh root@$SWARM_MANAGER "cd $CI_PROJECT_NAME && git fetch $ORIGIN_NAME $CI_COMMIT_BRANCH && git checkout $CI_COMMIT_BRANCH"
    - ssh root@$SWARM_MANAGER "cd $CI_PROJECT_NAME && git pull $ORIGIN_NAME $CI_COMMIT_BRANCH"
    - ssh root@$SWARM_MANAGER " cd $CI_PROJECT_NAME &&
                                docker image rm $IMAGE_REGISTRY/$IMAGE_NAME ;
                                docker build -t $IMAGE_NAME . &&
                                docker tag  $IMAGE_NAME  $IMAGE_REGISTRY/$IMAGE_NAME &&
                                docker push $IMAGE_REGISTRY/$IMAGE_NAME &&
                                docker pull $IMAGE_REGISTRY/$IMAGE_NAME"
    # - ssh root@$SWARM_MANAGER 
    # - ssh root@$SWARM_MANAGER "docker image rm $IMAGE_REGISTRY/$IMAGE_NAME"
    # - ssh root@$SWARM_MANAGER "docker pull $IMAGE_REGISTRY/$IMAGE_NAME"
  

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - export SECRET_NUMBER=$(cat ./secret.txt | grep -oP '(?<="secret_number":)\d+')
    - echo $SECRET_NUMBER
    - export SOURCE_BRANCH_LOW=$(echo $CI_COMMIT_BRANCH | tr '[:upper:]' '[:lower:]')
    - ssh root@$SWARM_MANAGER "docker pull $IMAGE_REGISTRY/$IMAGE_NAME"
    - ssh root@$SWARM_MANAGER "docker service create -d --replicas 1  --name web_app_6_1_$SOURCE_BRANCH_LOW --publish 5002:5002 -e SERVICE_PORT=5002 -e SECRET_NUMBER=$SECRET_NUMBER $IMAGE_REGISTRY/$IMAGE_NAME"

